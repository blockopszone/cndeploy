# Ansible role that installs and updates packages for Debian and RedHat based OS.
# TODO: Upgrade packages for other distributions.

---

- name: 'Resolve platform specific vars'
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      paths:
        - '{{ role_path }}/vars'
      skip: true

- name: 'Resolve SSH host IP'
  ansible.builtin.set_fact:
    ssh_host_ip: '{{ ansible_env["SSH_CONNECTION"].split(" ")[2] }}'

- name: 'Resolve node definition vars if present'
  when: cndeploy_nodes is defined
  block:
    - name: 'Export the dictionary containing this node variables to cndeploy_node'
      ansible.builtin.set_fact:
        cndeploy_node: '{{ item }}'
      with_list: '{{ cndeploy_nodes }}'
      when: item.cndeploy_node_management_ip == ssh_host_ip
    - name: 'Resolve the variables contained in cndeploy_node'
      when: cndeploy_node is defined
      ansible.builtin.set_fact:
        '{{ item.key }}': '{{ item.value }}'
      with_dict: '{{ cndeploy_node }}'

- name: 'Resolve cndeploy_config.all dictionary vars if present'
  when: cndeploy_config.all is defined
  ansible.builtin.set_fact:
    '{{ item.key }}': '{{ item.value }}'
  with_dict: '{{ cndeploy_config.all }}'

- name: 'Resolve cndeploy_config.{{ cndeploy_node_type }} dictionary vars if present'
  when: 'cndeploy_config[cndeploy_node_type] is defined'
  ansible.builtin.set_fact:
    '{{ item.key }}': '{{ item.value }}'
  with_dict: '{{ cndeploy_config[cndeploy_node_type] }}'

- name: 'Resolve cndeploy_config.{{ cndeploy_node_management_ip }} dictionary vars if present'
  when: 'cndeploy_config[cndeploy_node_management_ip] is defined'
  ansible.builtin.set_fact:
    '{{ item.key }}': '{{ item.value }}'
  with_dict: '{{ cndeploy_config[cndeploy_node_management_ip] }}'

- name: 'Install dependencies for the OS'
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_dep|default([]) }}'
    state: 'present'
  become: true
  become_user: 'root'

- name: 'Update cache for Debian based systems'
  ansible.builtin.apt:
    update_cache: true
  become: true
  become_user: 'root'
  when:
    - cndeploy_pkgs_update|default(false)|bool
    - ansible_facts['os_family'] == 'Debian'

- name: 'Upgrade all packages for Debian based Systems'
  ansible.builtin.apt:
    name: '*'
    state: 'latest'
  become: true
  become_user: 'root'
  when:
    - cndeploy_pkgs_upgrade|default(false)|bool
    - ansible_facts['os_family'] == 'Debian'

- name: 'Update cache for RedHat based systems'
  ansible.builtin.yum:
    update_cache: true
  become: true
  become_user: 'root'
  when:
    - cndeploy_pkgs_update|default(false)|bool
    - ansible_facts['os_family'] == 'RedHat'

- name: 'Upgrade all packages for RedHat based Systems'
  ansible.builtin.yum:
    name: '*'
    state: 'latest'
  become: true
  become_user: 'root'
  when:
    - cndeploy_pkgs_upgrade|default(false)|bool
    - ansible_facts['os_family'] == 'RedHat'

- name: 'Install additional packages'
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_add_list|default([]) }}'
    state: 'present'
  become: true
  become_user: 'root'
  when: cndeploy_pkgs_add|default(false)|bool
