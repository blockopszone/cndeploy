# Ansible role containing tasks to prepare hosts to be monitored.
# TODO: Setup of the monitoring server.

---

- name: 'Resolve platform specific vars'
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      paths:
        - '{{ role_path }}/vars'
      skip: true

- name: 'Resolve SSH host IP'
  ansible.builtin.set_fact:
    ssh_host_ip: '{{ ansible_env["SSH_CONNECTION"].split(" ")[2] }}'

- name: 'Resolve node definition vars if present'
  when: cndeploy_nodes is defined
  block:
    - name: 'Export the dictionary containing this node variables to cndeploy_node'
      ansible.builtin.set_fact:
        cndeploy_node: '{{ item }}'
      with_list: '{{ cndeploy_nodes }}'
      when: item.cndeploy_node_management_ip == ssh_host_ip
    - name: 'Resolve the variables contained in cndeploy_node'
      when: cndeploy_node is defined
      ansible.builtin.set_fact:
        '{{ item.key }}': '{{ item.value }}'
      with_dict: '{{ cndeploy_node }}'

- name: 'Resolve cndeploy_nodes_types.all dictionary vars if present'
  when: cndeploy_nodes_types.all is defined
  ansible.builtin.set_fact:
    '{{ item.key }}': '{{ item.value }}'
  with_dict: '{{ cndeploy_nodes_types.all }}'

- name: 'Resolve cndeploy_nodes_types.{{ cndeploy_node_type }} dictionary vars if present'
  when: 'cndeploy_nodes_types[cndeploy_node_type] is defined'
  ansible.builtin.set_fact:
    '{{ item.key }}': '{{ item.value }}'
  with_dict: '{{ cndeploy_nodes_types[cndeploy_node_type] }}'

- name: 'Resolve cndeploy_nodes_types.{{ cndeploy_node_management_ip }} dictionary vars if present'
  when: 'cndeploy_nodes_types[cndeploy_node_management_ip] is defined'
  ansible.builtin.set_fact:
    '{{ item.key }}': '{{ item.value }}'
  with_dict: '{{ cndeploy_nodes_types[cndeploy_node_management_ip] }}'

- name: 'Install dependencies for the OS'
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_dep|default([]) }}'
    state: 'present'
  become: true
  become_user: 'root'

- name: 'Create group for ssh tunneling'
  ansible.builtin.group:
    name: '{{ cndeploy_sshtunnel_user }}'
    state: present
  become: true
  become_user: 'root'

- name: 'Create user for ssh tunneling'
  ansible.builtin.user:
    group: '{{ cndeploy_sshtunnel_user }}'
    name: '{{ cndeploy_sshtunnel_user }}'
    shell: '/bin/false'
  become: true
  become_user: 'root'

- name: 'Set up authorized keys for ssh tunneling user'
  ansible.posix.authorized_key:
    key: '{{ cndeploy_sshtunnel_sshpubkey }}'
    state: 'present'
    user: '{{ cndeploy_sshtunnel_user }}'
  become: true
  become_user: 'root'
  when:
    - cndeploy_sshtunnel_sshpubkey is defined
    - cndeploy_sshtunnel_sshpubkey|length > 10

- name: 'Set SSH options for sshtunnel user'
  ansible.builtin.blockinfile:
    path: '/etc/ssh/sshd_config'
    block: |
      Match User {{ cndeploy_sshtunnel_user }}
        X11Forwarding no
        PermitTunnel no
        GatewayPorts no
        AllowAgentForwarding no
        AllowTcpForwarding yes
        PermitOpen 127.0.0.1:12798 127.0.0.1:9100
        PermitListen 127.0.0.1:8100
  become: true
  become_user: 'root'
  notify: 'Restart SSH service'

- name: 'Get stats of {{ cndeploy_node_config }}'
  ansible.builtin.stat:
    path: '{{ cndeploy_node_config }}'
  become: true
  become_user: 'root'
  register: cndeploy_node_config_info

- name: 'Add traceForwardTo clause to config.json'
  become: true
  become_user: 'root'
  when: cndeploy_node_config_info.stat.exists
  block:
    - name: 'Check if config.json contains the traceForwardTo clause'
      ansible.builtin.command:
        cmd: 'grep -q "traceForwardTo" {{ cndeploy_node_config|quote }}'
      changed_when: false
      check_mode: false
      failed_when: false
      ignore_errors: true
      register: cndeploy_trace_grep
    - name: 'Modify config.json if writeable and not contains the clause'
      ansible.builtin.shell: |
        jq '.traceForwardTo += {"tag": "RemoteSocket", "contents": ["127.0.0.1", "8100"]}' '{{ cndeploy_node_config|quote }}' > /tmp/config.json
        mv /tmp/config.json '{{ cndeploy_node_config|quote }}'
      notify: 'Restart Cardano node'
      when:
        - cndeploy_node_config_info.stat.writeable
        - cndeploy_trace_grep.rc != 0
