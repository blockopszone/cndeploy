# Ansible role that setup the firewall policy.
# Actions performed:
# - Check input variables
# - Optionally disable IPv6
# - Disable ufw and firewalld
# - Setup iptables rules according to node's role from templates (idempotently).
# - Optionally setup allow-hostname script to allow connections from a ddns hostname.
#
# TODO: Testing for Redhat family
---

- name: 'Check variables: cndeploy_node_type'
  assert:
    fail_msg: Invalid value -> Valid type values are "relay", "bp" and "standby".
    quiet: true
    that:
      - (cndeploy_node_type|lower == 'relay' or
         cndeploy_node_type|lower == 'bp' or
         cndeploy_node_type|lower == 'standby')

- name: 'Check variables: cndeploy_node_port'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> port must be an integer between 1 and 65535.
    quiet: true
    that:
      - cndeploy_node_port|int != 0
      - cndeploy_node_port >= 1
      - cndeploy_node_port <= 65535

- name: 'Check variables: cndeploy_bp_nodes.ip'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> cndeploy_bp_nodes.ip must contain valid IPv4 addresses.
    quiet: true
    that:
      - item.ip|ipv4
  loop: '{{ cndeploy_bp_nodes }}'
  when: cndeploy_bp_nodes is defined

- name: 'Check variables: cndeploy_bp_nodes.port'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> cndeploy_bp_nodes.port must be an integer between 1 and 65535.
    quiet: true
    that:
      - item.port|int != 0
      - item.port >= 1
      - item.port <= 65535
  loop: '{{ cndeploy_bp_nodes }}'
  when: cndeploy_bp_nodes is defined

- name: 'Check variables: cndeploy_bp_nodes.prio'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> cndeploy_bp_nodes.prio must be an integer between 1 and 99.
    quiet: true
    that:
      - item.prio|int != 0
      - item.prio >= 1
      - item.prio <= 99
  loop: '{{ cndeploy_bp_nodes }}'
  when: cndeploy_bp_nodes is defined

- name: 'Check variables: cndeploy_bp_nodes.role'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> Valid role values are "relay", "bp" and "standby".
    quiet: true
    that:
      - (item.role|lower == 'relay' or
         item.role|lower == 'active' or
         item.role|lower == 'warm' or
         item.role|lower == 'standby')
  loop: '{{ cndeploy_bp_nodes }}'
  when: cndeploy_bp_nodes is defined

- name: 'Check variables: cndeploy_relay_nodes_ip'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> relay_nodes_ip must contain valid IPv4 addresses.
    quiet: true
    that:
      - item|ipv4
  loop: '{{ cndeploy_relay_nodes_ip }}'
  when: cndeploy_relay_nodes_ip is defined

- name: 'Check variables: cndeploy_management_ip'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> management_ip must contain valid IPv4 addresses.
    quiet: true
    that:
      - item|ipv4
  loop: '{{ cndeploy_management_ip }}'
  when: cndeploy_management_ip is defined

- name: 'Check variables: cndeploy_allowhostname'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> allowhostname must be defined and resolve to an IPv4 address.
    quiet: true
    that:
      - cndeploy_allowhostname is defined
      - (lookup("dig", cndeploy_allowhostname) != 'NXDOMAIN')
  when: cndeploy_allowhostname_enabled|default(false)|bool

- name: 'Resolve platform specific vars'
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      paths:
        - '{{ role_path }}/vars'
      skip: true

- name: 'Resolve master IP'
  ansible.builtin.set_fact:
    master_ip: '{{ ansible_env["SSH_CLIENT"].split() | first }}'

- name: 'Show master IP (origin of current connection)'
  ansible.builtin.debug:
    msg: '{{ master_ip }}'

- name: 'Resolve host IP'
  ansible.builtin.set_fact:
    host_ip: hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2]

- name: 'Show host IP (destination of current connection)'
  ansible.builtin.debug:
    msg: '{{ host_ip }}'

- name: 'Install dependencies for the OS'
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_dep|default([]) }}'
    state: 'present'
  become: true
  become_user: 'root'

- name: 'Disable IPv6'
  ansible.posix.sysctl: name={{ item }} value=1 state=present reload=yes
  become: yes
  become_user: 'root'
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6
  when: cndeploy_disable_ipv6|default(false)|bool

- name: 'Setup firewall'
  # Ensure that the only firewall active is iptables as we require an idempotent
  # set of rules by flushing and loading from file at each execution.
  become: yes
  become_user: 'root'
  when: cndeploy_firewall_enabled|default(false)|bool
  block:
    - name: 'If iptables is available, proceed to setup firewalls...'
      ansible.builtin.stat:
        path: '/usr/sbin/iptables'
      register: iptables
    - name: 'Iptables is available, proceed to setup firewalls...'
      when: iptables.stat.exists
      block:
        - name: 'Disable UFW and enable netfilter-persistent'
          when: ansible_os_family == "Debian"
          block:
            - name: 'Disable UFW'
              ansible.builtin.systemd:
                name: 'ufw.service'
                state: 'stopped'
                enabled: false
              #community.general.ufw:
              #  state: 'disabled'
            - name: 'Enable netfilter-persistent'
              ansible.builtin.systemd:
                enabled: true
                name: 'netfilter-persistent.service'
                state: 'started'
        - name: 'Disable firewalld and enable iptables'
          when: ansible_os_family == "Redhat"
          block:
            - name: 'Disable firewalld'
              ansible.builtin.systemd:
                enabled: false
                masked: true
                name: 'firewalld.service'
                state: 'stopped'
            - name: 'Enable iptables'
              ansible.builtin.systemd:
                enabled: true
                name: 'iptables.service'
                state: 'started'
        - name: 'Activate Forwarding'
          ansible.posix.sysctl:
            name: 'net.ipv4.ip_forward'
            value: '1'
            sysctl_set: yes
            state: 'present'
            reload: true
        - name: 'Activate Forwarding from localhost'
          ansible.posix.sysctl:
            name: 'net.ipv4.conf.all.route_localnet'
            value: '1'
            sysctl_set: yes
            state: 'present'
            reload: true
        - name: 'Deploy iptables rules for Debian family'
          when: ansible_os_family == "Debian"
          block:
            - name: 'Deploy IP4 BP rules from template for Debian family'
              ansible.builtin.template:
                dest: '/etc/iptables/rules.v4'
                mode: '0644'
                src: 'iptables-rules-4-bp.j2'
              notify: 'Apply IP4 rules from file for Debian family'
              when: cndeploy_node_type == 'bp'
            - name: 'Deploy IP4 Relay rules from template for Debian family'
              ansible.builtin.template:
                dest: '/etc/iptables/rules.v4'
                mode: '0644'
                src: 'iptables-rules-4-relay.j2'
              notify: 'Apply IP4 rules from file for Debian family'
              when: cndeploy_node_type == 'relay'
            - name: 'Deploy IP4 Standby rules from template for Debian family'
              ansible.builtin.template:
                dest: '/etc/iptables/rules.v4'
                mode: '0644'
                src: 'iptables-rules-4-standby.j2'
              notify: 'Apply IP4 rules from file for Debian family'
              when: cndeploy_node_type == 'standby'
            - name: 'Deploy IP6 rules from template for Debian family'
              ansible.builtin.template:
                dest: '/etc/iptables/rules.v6'
                mode: '0644'
                src: 'iptables-rules-6.j2'
              notify: 'Apply IP6 rules from file for Debian family'
        - name: 'Deploy iptables rules for Redhat family'
          when: ansible_os_family == "Redhat"
          block:
            - name: 'Deploy IP4 BP rules from template for Redhat family'
              ansible.builtin.template:
                dest: '/etc/sysconfig/iptables'
                mode: '0644'
                src: 'iptables-rules-4-bp.j2'
              notify: 'Apply IP4 rules from file for Redhat family'
              when: cndeploy_node_type == 'bp'
            - name: 'Deploy IP4 Relay rules from template for Redhat family'
              ansible.builtin.template:
                dest: '/etc/sysconfig/iptables'
                mode: '0644'
                src: 'iptables-rules-4-relay.j2'
              notify: 'Apply IP4 rules from file for Redhat family'
              when: cndeploy_node_type == 'relay'
            - name: 'Deploy IP4 Standby rules from template for Redhat family'
              ansible.builtin.template:
                dest: '/etc/sysconfig/iptables'
                mode: '0644'
                src: 'iptables-rules-4-standby.j2'
              notify: 'Apply IP4 rules from file for Redhat family'
              when: cndeploy_node_type == 'standby'
            - name: 'Deploy IP6 rules from template for Redhat family'
              ansible.builtin.template:
                dest: '/etc/sysconfig/ip6tables'
                mode: '0644'
                src: 'iptables-rules-6.j2'
              notify: 'Apply IP6 rules from file for Redhat family'

- name: 'Setup allow-hostname in iptables mode'
  become: true
  become_user: 'root'
  when:
    - cndeploy_allowhostname_enabled|default(false)|bool
    - cndeploy_allowhostname is defined
  block:
    - name: 'Check if allow-hostname script already exists'
      # required as get_url not always behaves like described in its documentation,
      # overwriting the file when it exists, even with force:no and dest being the full file path
      ansible.builtin.stat:
        get_checksum: false
        get_md5: false
        path: '/usr/local/bin/allow-hostname.bash'
      changed_when: false
      register: allowhostname_file_check
    - name: 'Download allow-hostname script'
      ansible.builtin.get_url:
        dest: '/usr/local/bin/allow-hostname.bash'
        force: false
        mode: '0700'
        url: 'https://raw.githubusercontent.com/jmhoms/allow-hostname/master/allow-hostname.bash'
      when: not allowhostname_file_check.stat.exists
    - name: 'Configure defined hostname in the script'
      ansible.builtin.lineinfile:
        dest: '/usr/local/bin/allow-hostname.bash'
        line: 'HOSTNAME={{ cndeploy_allowhostname }}'
        regexp: '^HOSTNAME='
        state: 'present'
    - name: 'Configure iptables mode in the script'
      ansible.builtin.lineinfile:
        dest: '/usr/local/bin/allow-hostname.bash'
        line: 'IPTMODE=yes'
        regexp: '^IPTMODE='
        state: 'present'
    - name: 'Configure cron to run the script every 5 minutes'
      ansible.builtin.copy:
        content: |
          */5 * * * * root /usr/local/bin/allow-hostname.bash 2>&1 | logger -t allow-hostname
        dest: '/etc/cron.d/allow-hostname'
        group: 'root'
        mode: '0644'
        owner: 'root'
