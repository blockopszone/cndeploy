# Ansible role containing tasks to synchronize the Cardano node binaries
# from an origin host acting as a builder to the nodes.
# TODO: Add user variable in templates
# TODO: Add dbsync and ogmios systemd templates

---

- name: 'Check variables: cndeploy_cnode_origin_dir'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> Local cnode directory must be also defined
      in CNODE_HOME environment variable.
    quiet: true
    that:
      - cndeploy_cnode_origin_dir == lookup('env', 'CNODE_HOME')
        or cndeploy_cnode_origin_dir_check_override
  delegate_to: '{{ cndeploy_cnode_origin_host }}'

- name: 'Resolve platform specific vars'
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      paths:
        - '{{ role_path }}/vars'
      skip: true

- name: 'Install dependencies for the OS'
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_dep|default([]) }}'
    state: 'present'
  become: true
  become_user: 'root'

- name: 'Check origin Cardano versions'
  check_mode: false
  delegate_to: '{{ cndeploy_cnode_origin_host }}'
  ignore_errors: true
  block:
    - name: 'Check origin Cardano node version'
      ansible.builtin.command:
        cmd: 'cardano-node version'
      changed_when: false
      failed_when: false
      register: cndeploy_node_version_origin
    - name: 'Check origin Cardano client version'
      ansible.builtin.command:
        cmd: 'cardano-cli version'
      changed_when: false
      failed_when: false
      register: cndeploy_cli_version_origin
    - name: 'Check origin cncli version'
      ansible.builtin.command:
        cmd: 'cncli -V'
      changed_when: false
      failed_when: false
      register: cndeploy_cncli_version_origin
    - name: 'Show origin Cardano node version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_node_version_origin.stdout }}'
      changed_when: false
      failed_when: false
    - name: 'Show origin Cardano client version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_cli_version_origin.stdout }}'
      changed_when: false
      failed_when: false
    - name: 'Show origin cncli version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_cncli_version_origin.stdout }}'
      changed_when: false
      failed_when: false

- name: 'Check remote cardano versions'
  check_mode: false
  ignore_errors: true
  block:
    - name: 'Check remote Cardano node version'
      ansible.builtin.command:
        cmd: '~/.cabal/bin/cardano-node version'
      changed_when: false
      failed_when: false
      register: cndeploy_node_version
    - name: 'Check remote Cardano client version'
      ansible.builtin.command:
        cmd: '~/.cabal/bin/cardano-cli version'
      changed_when: false
      failed_when: false
      register: cndeploy_cli_version
    - name: 'Check remote cncli version'
      ansible.builtin.command:
        cmd: '~/.cargo/bin/cncli -V'
      changed_when: false
      failed_when: false
      register: cndeploy_cncli_version
    - name: 'Show remote Cardano node version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_node_version.stdout }}'
      changed_when: false
      failed_when: false
    - name: 'Show remote Cardano client version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_cli_version.stdout }}'
      changed_when: false
      failed_when: false
    - name: 'Show remote cncli version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_cncli_version.stdout }}'
      changed_when: false
      failed_when: false

- name: 'Prepare SSH copy requirements if something needs to be transferred'
  when: (
          (
            (cndeploy_node_version_origin.rc == 0) and
            (cndeploy_cli_version_origin.rc == 0) and
            (
              (cndeploy_node_version_origin.stdout != cndeploy_node_version.stdout) or
              (cndeploy_cli_version_origin.stdout != cndeploy_cli_version.stdout)
            )
          )
          or
          (
            (cndeploy_cncli_version_origin.rc == 0) and
            (cndeploy_cnode_cncli_install) and
            (cndeploy_cncli_version_origin.stdout != cndeploy_cncli_version.stdout)
          )
        )
  block:
    - name: 'Stop the service in origin'
      ansible.builtin.service:
        name: 'cnode.service'
        state: 'stopped'
      become: true
      become_user: 'root'
      delegate_to: '{{ cndeploy_cnode_origin_host }}'
      notify: 'Start Cardano node in origin'
      register: originservice
    - name: 'Wait 30 seconds to make sure the service in origin is stopped'
      ansible.builtin.pause:
        seconds: 30
      when: originservice.changed
    - name: 'Stop the remote service if needed'
      ansible.builtin.service:
        name: 'cnode.service'
        state: 'stopped'
      become: true
      become_user: 'root'
      notify: 'Start Cardano node'
      register: remoteservice
      when: cndeploy_node_version.rc == 0
    - name: 'Wait 30 seconds to make sure the remote service is stopped'
      ansible.builtin.pause:
        seconds: 30
      when: remoteservice.changed
    - name: 'Temporarily allow ssh from non-master origin to remote'
      become: yes
      become_user: 'root'
      when:
        - cndeploy_firewall_enabled|default(false)|bool
        - cndeploy_cnode_origin_host != 'localhost'
        - cndeploy_cnode_origin_host != '127.0.0.1'
      block:
        - name: 'Check if ufw is available'
          ansible.builtin.stat:
            path: '/usr/sbin/ufw'
          register: ufw
        - name: 'Check if firewalld is available'
          ansible.builtin.stat:
            path: '/usr/sbin/firewalld'
          register: firewalld
        - name: 'Check if iptables is available'
          ansible.builtin.stat:
            path: '/usr/sbin/iptables'
          register: iptables
        - name: 'Use ufw if available'
          when: ufw.stat.exists
          block:
            - name: 'ufw Allow SSH from origin'
              community.general.ufw:
                port: 22
                proto: 'tcp'
                rule: 'allow'
                src: '{{ cndeploy_cnode_origin_host }}'
              notify: 'ufw Disallow SSH from origin'
        - name: 'Use firewald if available when ufw is not'
          # TODO testing needed
          when:
            - not ufw.stat.exists
            - firewalld.stat.exists
          block:
            - name: 'firewalld Allow SSH from origin'
              ansible.posix.firewalld:
                permanent: 'yes'
                port: '22/tcp'
                source: '{{ cndeploy_cnode_origin_host }}'
                state: 'enabled'
              notify: 'firewalld Disallow SSH from origin'
        - name: 'Use iptables if available when ufw and firewalld are not'
          # TODO finish block with iptables module + permanent changes
          ansible.builtin.debug:
            msg: >
              Iptables is the only known firewall available on the host,
              but it can't be setup as it is not yet supported by the script.
          when:
            - not ufw.stat.exists
            - not firewalld.stat.exists
            - iptables.stat.exists
    - name: 'Create a keypair in origin if it does not already exist'
      ansible.builtin.command:
        cmd: 'ssh-keygen -q -b 2048 -t rsa -N "" -C "creating SSH" -f ~/.ssh/id_rsa'
        creates: '~/.ssh/id_rsa.pub'
      delegate_to: '{{ cndeploy_cnode_origin_host }}'
    - name: 'Get the pub key into a variable'
      ansible.builtin.command: '/usr/bin/cat ~/.ssh/id_rsa.pub'
      changed_when: false
      check_mode: false
      delegate_to: '{{ cndeploy_cnode_origin_host }}'
      register: originpubkey
    - name: 'Temporarily allow origin public key in remote if not already allowed'
      ansible.posix.authorized_key:
        key: '{{ originpubkey.stdout }}'
        state: 'present'
        user: '{{ cndeploy_user }}'
      notify: 'Disallow origin public key in remote'

- name: 'If Cardano node is installed in origin copy binaries to destination'
  when:
    - cndeploy_node_version_origin.rc == 0
    - cndeploy_cli_version_origin.rc == 0
  block:
    - name: 'Copy binaries only if origin and remote versions are not equal'
      when: ((cndeploy_node_version_origin.stdout != cndeploy_node_version.stdout) or
             (cndeploy_cli_version_origin.stdout != cndeploy_cli_version.stdout))
      block:
        - name: 'Install/Update Guild Operators CNODE skipping system dependencies and reset settings to default'
          block:
            - name: 'Ensures $HOME/tmp exist'
              ansible.builtin.file:
                path: '~/tmp'
                recurse: true
                state: 'directory'
            - name: 'Get Guild Operators prereqs.sh script'
              ansible.builtin.get_url:
                dest: '~/tmp/'
                mode: '0755'
                url: 'https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/prereqs.sh'
            - name: 'Run prereqs.sh installer with -f and -s'
              # -s avoid installing system dependencies plus ghc and cabal mainly to build the node
              # -f forces to overwrite config files and scripts with new versions
              ansible.builtin.command:
                cmd: '~/tmp/prereqs.sh -f -s'
        - name: 'Deploy Cardano node by transferring the compiled binaries to the host'
          ansible.posix.synchronize:
            archive: true
            delete: true
            dest: '~/'
            mode: 'push'
            src: '~/.cabal'
          delegate_to: '{{ cndeploy_cnode_origin_host }}'
          # synchronize works better for big transfers
          #ansible.builtin.copy:
          #  src: '~/.cabal'
          #  dest: '~'
          #async: 86400
          #poll: 60
        - name: 'Check again for remote cardano versions'
          check_mode: false
          ignore_errors: true
          block:
            # TODO: Be sure bin is in path
            - name: 'Check new remote Cardano node version'
              ansible.builtin.command:
                cmd: '~/.cabal/bin/cardano-node version'
              changed_when: false
              failed_when: false
              register: cndeploy_node_version_new
            - name: 'Check new remote Cardano client version'
              ansible.builtin.command:
                cmd: '~/.cabal/bin/cardano-cli version'
              changed_when: false
              failed_when: false
              register: cndeploy_cli_version_new
            - name: 'Show new remote Cardano node version'
              ansible.builtin.debug:
                msg: '{{ cndeploy_node_version_new.stdout }}'
              changed_when: false
              failed_when: false
            - name: 'Show new remote Cardano client version'
              ansible.builtin.debug:
                msg: '{{ cndeploy_cli_version_new.stdout }}'
              changed_when: false
              failed_when: false
        - name: 'Sending Warning if installation failed ...'
          ansible.builtin.debug:
            msg: 'WARNING INSTALL FAILED'
          when: ((cndeploy_node_version_origin.stdout != cndeploy_node_version_new.stdout) or
                 (cndeploy_cli_version_origin.stdout != cndeploy_cli_version_new.stdout))

- name: 'Copy systemd unit files for all operation modes using templates'
  become: true
  become_user: 'root'
  block:
    - name: 'Deploy from template the systemd unit file cnode-cncli-leaderlog.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-cncli-leaderlog.service'
        mode: '0644'
        src: 'cnode-cncli-leaderlog.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-cncli-ptsendslots.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-cncli-ptsendslots.service'
        mode: '0644'
        src: 'cnode-cncli-ptsendslots.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-cncli-ptsendtip.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-cncli-ptsendtip.service'
        mode: '0644'
        src: 'cnode-cncli-ptsendtip.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-cncli-sync.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-cncli-sync.service'
        mode: '0644'
        src: 'cnode-cncli-sync.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-cncli-validate.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-cncli-validate.service'
        mode: '0644'
        src: 'cnode-cncli-validate.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-logmonitor.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-logmonitor.service'
        mode: '0644'
        src: 'cnode-logmonitor.service.j2'
    - name: 'Deploy from template the systemd unit file cnode.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode.service'
        mode: '0644'
        src: 'cnode.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-tu-fetch.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-tu-fetch.service'
        mode: '0644'
        src: 'cnode-tu-fetch.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-tu-push.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-tu-push.service'
        mode: '0644'
        src: 'cnode-tu-push.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-tu-push.timer'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-tu-push.timer'
        mode: '0644'
        src: 'cnode-tu-push.timer.j2'
    - name: 'Deploy from template the systemd unit file cnode-tu-restart.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-tu-restart.service'
        mode: '0644'
        src: 'cnode-tu-restart.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-tu-restart.timer'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-tu-restart.timer'
        mode: '0644'
        src: 'cnode-tu-restart.timer.j2'
    - name: 'Deploy from template the systemd unit file cnode-submit-api.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-submit-api.service'
        mode: '0644'
        src: 'cnode-submit-api.service.j2'
    - name: 'Deploy from template the systemd unit file cnode-tu-blockperf.service'
      ansible.builtin.template:
        dest: '/etc/systemd/system/cnode-tu-blockperf.service'
        mode: '0644'
        src: 'cnode-tu-blockperf.service.j2'

- name: 'If cncli is installed in origin and needs to be installed in destination'
  when:
    - cndeploy_cncli_version_origin.rc == 0
    - cndeploy_cnode_cncli_install
  block:
    - name: 'Copy cncli binaries if origin and remote versions are not equal'
      when: (cndeploy_cncli_version_origin.stdout != cndeploy_cncli_version.stdout)
      block:
        - name: 'Deploy cargo binaries'
          ansible.posix.synchronize:
            archive: true
            delete: true
            dest: '~/'
            mode: 'push'
            src: '~/.cargo'
          delegate_to: '{{ cndeploy_cnode_origin_host }}'
        - name: 'Check again for remote cncli versions'
          check_mode: false
          ignore_errors: true
          block:
            - name: 'Check new remote cncli version'
              ansible.builtin.command:
                cmd: '~/.cargo/bin/cncli -V'
              changed_when: false
              failed_when: false
              register: cndeploy_cncli_version_new
            - name: 'Show new remote cncli version'
              ansible.builtin.debug:
                msg: '{{ cndeploy_cncli_version_new.stdout }}'
              changed_when: false
              failed_when: false
        - name: 'Sending Warning if cncli installation failed ...'
          ansible.builtin.debug:
            msg: 'WARNING CNCLI INSTALL FAILED'
          when: (cndeploy_cncli_version_origin.stdout != cndeploy_cncli_version_new.stdout)
    - name: 'Add cargo init to bashrc'
      ansible.builtin.lineinfile:
        path: '~/.bashrc'
        line: . "$HOME/.cargo/env"
