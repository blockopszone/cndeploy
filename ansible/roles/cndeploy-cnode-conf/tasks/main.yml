# Ansible role containing tasks to configure Cardano stake pool nodes
# using Guild operator's cnode.

---

- name: 'Check variables: cndeploy_cnode_dir_local'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> Local cnode directory must be also defined
      in CNODE_HOME environment variable.
    quiet: true
    that:
      - cndeploy_cnode_dir_local == lookup('env', 'CNODE_HOME')
        or cndeploy_cnode_dir_local_check_override
  delegate_to: localhost

- name: 'Check variables: cndeploy_node_type'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> Valid type values are "relay" and "bp".
    quiet: true
    that:
      - (cndeploy_node_type|lower == 'relay' or cndeploy_node_type|lower == 'bp')

- name: 'Check variables: cndeploy_node_ticker'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> String must contain between 3 and 5 characters,
      allowed characters are A to Z and 0 to 9.
    quiet: true
    that:
      - cndeploy_node_ticker is match('^[A-Z0-9]{3,5}$')

- name: 'Check variables: cndeploy_node_port'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> port must be an integer between 1 and 65535.
    quiet: true
    that:
      - cndeploy_node_port is integer
      - cndeploy_node_port >= 1
      - cndeploy_node_port <= 65535

- name: 'Check variables: cndeploy_node_cores'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> value must be an integer between 1 and 64.
    quiet: true
    that:
      - cndeploy_node_cores is integer
      - cndeploy_node_cores >= 1
      - cndeploy_node_cores <= 64

- name: 'Check variables: cndeploy_relay_nodes'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> addr must be an IPv4 address or a resolvable host,
      and port must be an integer between 1 and 65535
    quiet: true
    that:
      - (item.addr|ipv4 or lookup('dig', item.addr) != 'NXDOMAIN')
      - item.port is integer
      - item.port >= 1
      - item.port <= 65535
  loop: '{{ cndeploy_relay_nodes }}'

- name: 'Resolve platform specific vars'
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      paths:
        - '{{ role_path }}/vars'
      skip: true

- name: 'Install dependencies for the OS'
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_dep|default([]) }}'
    state: 'present'
  become: true
  become_user: 'root'

- name: 'Configure Cardano Node'
  block:
    - name: 'Set the common configuration for nodes'
      block:
        - name: 'Set POOL_NAME in {{ cndeploy_cnode_dir }}/scripts/env'
          ansible.builtin.lineinfile:
            insertafter: '^#POOL_NAME='
            line: 'POOL_NAME="{{ cndeploy_node_ticker|default() }}"'
            path: '{{ cndeploy_cnode_dir }}/scripts/env'
            regexp: '^POOL_NAME='
            state: 'present'
          register: poolname
        - name: 'Set CNODE_PORT in {{ cndeploy_cnode_dir }}/scripts/env'
          ansible.builtin.lineinfile:
            insertafter: '^#CNODE_PORT='
            line: 'CNODE_PORT="{{ cndeploy_node_port|default(3000) }}"'
            path: '{{ cndeploy_cnode_dir }}/scripts/env'
            regexp: '^CNODE_PORT='
            state: 'present'
          register: nodeport
        - name: 'Set CPU_CORES in {{ cndeploy_cnode_dir }}/scripts/cnode.sh'
          ansible.builtin.lineinfile:
            insertafter: '^#CPU_CORES='
            line: 'CPU_CORES={{ cndeploy_node_cores|default(2) }}'
            path: '{{ cndeploy_cnode_dir }}/scripts/cnode.sh'
            regexp: '^CPU_CORES='
            state: 'present'
          register: cpucores
    - name: 'Set the configuration for Relays'
      when: cndeploy_node_type == 'relay'
      block:
        # TODO: Ensure changed id correct
        - name: 'For Relays make sure priv directory is empty'
          ansible.builtin.shell:
            cmd: 'srm -rfz {{ cndeploy_cnode_dir|quote }}/priv/*'
          args:
            removes: '{{ cndeploy_cnode_dir }}/priv/*'
          register: relaypriv
        - name: 'For Relays set CUSTOM_PEERS in {{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
          ansible.builtin.lineinfile:
            insertafter: '^#CUSTOM_PEERS='
            line: 'CUSTOM_PEERS="{{ cndeploy_node_custom_peers|default() }}"'
            path: '{{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
            regexp: '^CUSTOM_PEERS='
            state: 'present'
          register: relaycustompeers
    - name: 'Set the configuration for Block Producers'
      when: cndeploy_node_type == 'bp'
      block:
        # Simpler and quicker option but it requires rsync,
        # by default we'll use the builtin file and copy modules
        #- name: For BP Nodes copy priv directory without cold.skey using synchronize
        #  ansible.posix.synchronize:
        #    src: '{{ cndeploy_cnode_dir_local }}/priv/pool/{{ cndeploy_node_ticker }}'
        #    dest: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}'
        #    rsync_opts:
        #      - "--no-motd"
        #      - "--exclude=.git"
        - name: 'For BP Nodes copy priv directory without cold.* using file/copy'
          block:
            - name: 'For BP Nodes create directory for private keys'
              # TODO check if mode is changed for already existent parent directories
              ansible.builtin.file:
                mode: '0700'
                owner: '{{ ansible_user_id }}'
                path: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}'
                recurse: true
                state: 'directory'
              register: bpprivdir
            - name: 'Debug bpprivdir...'
              ansible.builtin.debug:
                msg: bpprivdir
            - name: 'For BP Nodes create a list of private files (excluding cold files)'
              ansible.builtin.find:
                excludes: 'cold.skey,cold.vkey,cold.counter'
                file_type: 'file'
                paths: '{{ cndeploy_cnode_dir_local }}/priv/pool/{{ cndeploy_node_ticker }}'
              delegate_to: localhost
              register: cndeploy_cnode_priv
            # TODO: Ensure changed id correct
            - name: 'For BP Nodes copy private files in list'
              ansible.builtin.copy:
                dest: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}/'
                mode: '0600'
                owner: '{{ ansible_user_id }}'
                src: '{{ item.path }}'
              loop: '{{ cndeploy_cnode_priv.files }}'
              register: bpprivfiles
            - name: 'Debug bpprivfiles...'
              ansible.builtin.debug:
                msg: bpprivfiles                           
        - name: 'For BP Nodes define topology in {{ cndeploy_cnode_dir }}/files/topology.json'
          ansible.builtin.template:
            dest: '{{ cndeploy_cnode_dir }}/files/topology.json'
            mode: '0664'
            src: 'topology.json.j2'
          register: bptopology
        - name: 'For BP Nodes unset CUSTOM_PEERS in {{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
          ansible.builtin.lineinfile:
            path: '{{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
            regexp: '^CUSTOM_PEERS='
            state: 'absent'
          register: bpcustompeers
        - name: 'Set POOL_TICKER in {{ cndeploy_cnode_dir }}/scripts/cncli.sh'
          ansible.builtin.lineinfile:
            insertafter: '^#POOL_TICKER='
            line: 'POOL_TICKER={{ cndeploy_node_ticker }}'
            path: '{{ cndeploy_cnode_dir }}/scripts/cncli.sh'
            regexp: '^POOL_TICKER='
            state: 'present'
          register: bpticker
        - name: 'Set PT_API_KEY in {{ cndeploy_cnode_dir }}/scripts/cncli.sh'
          ansible.builtin.lineinfile:
            insertafter: '^#PT_API_KEY='
            line: 'PT_API_KEY={{ cndeploy_cnode_cncli_ptapikey }}'
            path: '{{ cndeploy_cnode_dir }}/scripts/cncli.sh'
            regexp: '^PT_API_KEY='
            state: 'present'
          register: bpptapikey
          when:
            - cndeploy_cnode_cncli_ptapikey is defined
            - cndeploy_cnode_cncli_ptapikey|length > 10

- name: 'Set the services'
  block:
    - name: 'For Relays ensure proper service status (enabled/disabled)'
      #Â TODO check if all the required setup is in place for every service
      become: true
      become_user: 'root'
      when: cndeploy_node_type == 'relay'
      block:
        - name: 'For Relays disable cnode-cncli-leaderlog.service'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-cncli-leaderlog.service'
            state: 'stopped'
        - name: 'For Relays disable cnode-cncli-ptsendslots.service'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-cncli-ptsendslots.service'
            state: 'stopped'
        - name: 'For Relays disable cnode-cncli-validate.service'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-cncli-validate.service'
            state: 'stopped'
        - name: 'For Relays disable cnode-cncli-sync.service'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-cncli-sync.service'
            state: 'stopped'
        - name: 'For Relays disable cnode-cncli-ptsendtip.service'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-cncli-ptsendtip.service'
            state: 'stopped'
        - name: 'For Relays disable cnode-logmonitor.service'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-logmonitor.service'
            state: 'stopped'
        - name: 'For Relays enable cnode-tu-fetch.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-tu-fetch.service'
        - name: 'For Relays enable cnode-tu-push.service'
          ansible.builtin.systemd:
            masked: false
            name: 'cnode-tu-push.service'
        - name: 'For Relays enable cnode-tu-push.timer'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-tu-push.timer'
        - name: 'For Relays enable cnode-tu-restart.service'
          ansible.builtin.systemd:
            masked: false
            name: 'cnode-tu-restart.service'
        - name: 'For Relays enable cnode-tu-restart.timer'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-tu-restart.timer'
    - name: 'For BP Nodes ensure proper service status (enabled/disabled)'
      #Â TODO check if all the required setup is in place for every service
      become: true
      become_user: 'root'
      when: cndeploy_node_type == 'bp'
      block:
        - name: 'Get stats of ~/.cargo/bin/cncli'
          ansible.builtin.stat:
            path: '~/.cargo/bin/cncli'
          register: cndeploy_cncli_info
        - name: 'For BP Nodes disable cnode-tu-fetch.service'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-tu-fetch.service'
            state: 'stopped'
        - name: 'For BP Nodes disable cnode-tu-push.service'
          ansible.builtin.systemd:
            masked: true
            name: 'cnode-tu-push.service'
            state: 'stopped'
        - name: 'For BP Nodes disable cnode-tu-push.timer'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-tu-push.timer'
            state: 'stopped'
        - name: 'For BP Nodes disable cnode-tu-restart.service'
          ansible.builtin.systemd:
            masked: true
            name: 'cnode-tu-restart.service'
            state: 'stopped'
        - name: 'For BP Nodes disable cnode-tu-restart.timer'
          ansible.builtin.systemd:
            enabled: false
            masked: true
            name: 'cnode-tu-restart.timer'
            state: 'stopped'
        - name: 'For BP Nodes, if set, enable cnode-cncli-leaderlog.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-cncli-leaderlog.service'
          when:
            - cndeploy_cncli_info.stat.exists
            - cndeploy_cnode_cncli_leaderlog_enabled
        - name: 'For BP Nodes, if set, enable cnode-cncli-ptsendslots.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-cncli-ptsendslots.service'
          when:
            - cndeploy_cncli_info.stat.exists
            - cndeploy_cnode_cncli_ptsendslots_enabled
            - cndeploy_cnode_cncli_ptapikey is defined
            - cndeploy_cnode_cncli_ptapikey|length > 10
        - name: 'For BP Nodes, if set, enable cnode-cncli-validate.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-cncli-validate.service'
          when:
            - cndeploy_cncli_info.stat.exists
            - cndeploy_cnode_cncli_validate_enabled
        - name: 'For BP Nodes, if set, enable cnode-cncli-sync.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-cncli-sync.service'
          when:
            - cndeploy_cncli_info.stat.exists
            - cndeploy_cnode_cncli_sync_enabled
        - name: 'For BP Nodes, if set, enable cnode-cncli-ptsendtip.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-cncli-ptsendtip.service'
          when:
            - cndeploy_cncli_info.stat.exists
            - cndeploy_cnode_cncli_ptsendtip_enabled
            - cndeploy_cnode_cncli_ptapikey is defined
            - cndeploy_cnode_cncli_ptapikey|length > 10
        - name: 'For BP Nodes, if set, enable cnode-logmonitor.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode-logmonitor.service'
          when:
            - cndeploy_cnode_logmonitor_enabled
    - name: 'Enable cnode.service'
      ansible.builtin.systemd:
        enabled: true
        masked: false
        name: 'cnode.service'
        #state: 'started'
      become: true
      become_user: 'root'

- name: 'Stop the node if configuration changes were made'
  notify: 'Start Cardano node'
  ansible.builtin.service:
    name: 'cnode.service'
    state: 'stopped'
  become: true
  become_user: 'root'
  when: poolname is changed or
        nodeport is changed or
        cpucores is changed or
        relaypriv is changed or
        relaycustompeers is changed or
        bpprivdir is changed or
        bpprivfiles is changed or
        bptopology is changed or
        bpcustompeers is changed or
        bpticker is changed or
        bpptapikey is changed

- name: 'Check that user bash aliases are in place'
  ansible.builtin.blockinfile:
    block: '{{ cndeploy_aliases }}'
    create: true
    mode: '0600'
    path: '~/.bash_aliases'
  when: cndeploy_add_aliases|default(false)|bool
