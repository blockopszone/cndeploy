---
# TODO: Variables checks for the role
- name: "Check variables: cndeploy_relay_nodes"
  fail:
    msg='Invalid configuration value.'
  when:
    - lookup("dig", item.addr) == "NXDOMAIN"
    - not item.addr|ipv4
  loop: '{{ cndeploy_relay_nodes_old }}'

- name: resolve platform specific vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/vars'

- name: Install dependencies for the OS
  become: yes
  become_user: root
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_dep|default([]) }}'
    state: present

- name: Check local Cardano versions
  delegate_to: localhost
  check_mode: no
  ignore_errors: yes
  changed_when: no
  failed_when: no
  block:
    - name: Check local Cardano node version
      ansible.builtin.command: cardano-node version
      register: cndeploy_node_version_local
    - name: Check local Cardano client version
      ansible.builtin.command: cardano-cli version
      register: cndeploy_cli_version_local
    - name: Show local Cardano node version
      ansible.builtin.debug:
        msg: {{ cndeploy_node_version_local.stdout }}
    - name: Show local Cardano client version
      ansible.builtin.debug:
        msg: {{ cndeploy_cli_version_local.stdout }}

# TODO Check local cnode dir setting to avoid misconfigurations side effects
# TODO Check env var CNODE_HOME with printenv or ansible mod

- name: If Cardano node is locally installed
  when:
    - cndeploy_node_version_local.rc == 0
    - cndeploy_cli_version_local.rc == 0
  block:
    - name: Check remote cardano versions
      check_mode: no
      ignore_errors: yes
      changed_when: no
      failed_when: no
      block:
        - name: Check remote Cardano node version
          ansible.builtin.command: cardano-node version
          register: cndeploy_node_version
        - name: Check remote Cardano client version
          ansible.builtin.command: cardano-cli version
          register: cndeploy_cli_version
        - name: Show remote Cardano node version
          ansible.builtin.debug:
            msg: {{ cndeploy_node_version.stdout }}
        - name: Show remote Cardano client version
          ansible.builtin.debug:
            msg: {{ cndeploy_cli_version.stdout }}
    - name: If local and remote versions are not equal proceed to install
      when: ((cndeploy_node_version_local.stdout != cndeploy_node_version.stdout) or
             (cndeploy_cli_version_local.stdout != cndeploy_cli_version.stdout))
      block:
        - name: Stop the local service
          delegate_to: localhost
          become: yes
          become_user: root
          ansible.builtin.command: systemctl stop cnode.service
          notify: Start Cardano node Local
        - name: Wait 30 seconds to make sure the local service is stopped
          pause:
            seconds: 30
        - name: Stop the remote service if needed
          when: cndeploy_node_version.rc == 0
          become: yes
          become_user: root
          ansible.builtin.command: systemctl stop cnode.service
          notify: Start Cardano node
        - name: Wait 30 seconds to make sure the remote service is stopped
          when: cndeploy_node_version.rc == 0
          pause:
            seconds: 30
        - name: Deploy Cardano node by transferring the compiled binaries to the host
          async: 86400
          poll: 60
          ansible.builtin.copy:
            src: ~/.cabal
            dest: ~
        - name: Check again for remote cardano versions
          check_mode: no
          ignore_errors: yes
          changed_when: no
          failed_when: no
          block:
            - name: Check new remote Cardano node version
              ansible.builtin.command: cardano-node version
              register: cndeploy_node_version_new
            - name: Check new remote Cardano client version
              ansible.builtin.command: cardano-cli version
              register: cndeploy_cli_version_new
            - name: Show new remote Cardano node version
              ansible.builtin.debug:
                msg: {{ cndeploy_node_version_new.stdout }}
            - name: Show new remote Cardano client version
              ansible.builtin.debug:
                msg: {{ cndeploy_cli_version_new.stdout }}
        - name: End execution for host if install was not successful
          meta: end_host
          when: ((cndeploy_node_version_local.stdout != cndeploy_node_version_new.stdout) or
                 (cndeploy_cli_version_local.stdout != cndeploy_cli_version_new.stdout))
        - name: Copy systemd unit files for all operation modes using templates
          become: yes
          become_user: root
          # Implemented using diferent tasks (instead of a with_items item.src item.dst loop)
          # in order to get a separated task status for each unit file
          block:
            - name: Deploy from template the systemd unit file cnode-cncli-leaderlog.service
              ansible.builtin.template:
                src: cnode-cncli-leaderlog.service.j2
                dest: /etc/systemd/system/cnode-cncli-leaderlog.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-cncli-ptsendslots.service
              ansible.builtin.template:
                src: cnode-cncli-ptsendslots.service.j2
                dest: /etc/systemd/system/cnode-cncli-ptsendslots.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-cncli-ptsendtip.service
              ansible.builtin.template:
                src: cnode-cncli-ptsendtip.service.j2
                dest: /etc/systemd/system/cnode-cncli-ptsendtip.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-cncli-sync.service
              ansible.builtin.template:
                src: cnode-cncli-sync.service.j2
                dest: /etc/systemd/system/cnode-cncli-sync.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-cncli-validate.service
              ansible.builtin.template:
                src: cnode-cncli-validate.service.j2
                dest: /etc/systemd/system/cnode-cncli-validate.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-logmonitor.service
              ansible.builtin.template:
                src: cnode-logmonitor.service.j2
                dest: /etc/systemd/system/cnode-logmonitor.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode.service
              ansible.builtin.template:
                src: cnode.service.j2
                dest: /etc/systemd/system/cnode.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-tu-fetch.service
              ansible.builtin.template:
                src: cnode-tu-fetch.service.j2
                dest: /etc/systemd/system/cnode-tu-fetch.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-tu-push.service
              ansible.builtin.template:
                src: cnode-tu-push.service.j2
                dest: /etc/systemd/system/cnode-tu-push.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-tu-push.timer
              ansible.builtin.template:
                src: cnode-tu-push.timer.j2
                dest: /etc/systemd/system/cnode-tu-push.timer
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-tu-restart.service
              ansible.builtin.template:
                src: cnode-tu-restart.service.j2
                dest: /etc/systemd/system/cnode-tu-restart.service
                mode: 0644
            - name: Deploy from template the systemd unit file cnode-tu-restart.timer
              ansible.builtin.template:
                src: cnode-tu-restart.timer.j2
                dest: /etc/systemd/system/cnode-tu-restart.timer
                mode: 0644
        - name: Copy db if not already present
          block:
            - name: Check if db directory is empty
              ansible.builtin.find:
                paths: '{{ cndeploy_cnode_dir }}/db/'
                file_type: any
                patterns: '*.*'
              register: cndeploy_db_dir_files
            - name: If db directory is empty copy the database to save some time
              when: cndeploy_db_dir_files.matched|int = 0
              async: 86400
              poll: 60
              ansible.builtin.copy:
                src: '{{ cndeploy_cnode_dir_local }}/db'
                dest: '{{ cndeploy_cnode_dir }}/'
        - name: Synchronize the common configuration for nodes
          block:
            - name: 'Set POOL_NAME in {{ cndeploy_cnode_dir }}/scripts/env'
              ansible.builtin.lineinfile:
                path: '{{ cndeploy_cnode_dir }}/scripts/env'
                regexp: '^POOL_NAME='
                insertafter: '^#POOL_NAME='
                line: 'POOL_NAME="{{ cndeploy_node_ticker|default() }}"'
                state: present
            - name: 'Set CNODE_PORT in {{ cndeploy_cnode_dir }}/scripts/env'
              ansible.builtin.lineinfile:
                path: '{{ cndeploy_cnode_dir }}/scripts/env'
                regexp: '^CNODE_PORT='
                insertafter: '^#CNODE_PORT='
                line: 'CNODE_PORT="{{ cndeploy_node_port|default(3000) }}"'
                state: present
            - name: 'Set CPU_CORES in {{ cndeploy_cnode_dir }}/scripts/cnode.sh'
              ansible.builtin.lineinfile:
                path: '{{ cndeploy_cnode_dir }}/scripts/cnode.sh'
                regexp: '^CPU_CORES='
                insertafter: '^#CPU_CORES='
                line: 'CPU_CORES={{ cndeploy_node_cores|default(2) }}'
                state: present
        - name: Synchronize the configuration for Relays
          when: cndeploy_node_type == "relay"
          block:
            - name: For Relays make sure priv directory is empty
              ansible.builtin.shell:
                cmd: srm -rfz {{ cndeploy_cnode_dir|quote }}/priv/*
              args:
                removes: {{ cndeploy_cnode_dir }}/priv/*
            - name: 'For Relays set CUSTOM_PEERS in {{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
              ansible.builtin.lineinfile:
                path: '{{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
                regexp: '^CUSTOM_PEERS='
                insertafter: '^#CUSTOM_PEERS='
                line: 'CUSTOM_PEERS="{{ cndeploy_node_custom_peers|default() }}"'
                state: present
            - name: For Relays ensure proper service status (enabled/disabled)
              # TODO check if all required setup is in place for every service
              block:
                - name: For Relays disable cnode-cncli-leaderlog.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-leaderlog.service
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For Relays disable cnode-cncli-ptsendslots.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-ptsendslots.service
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For Relays disable cnode-cncli-validate.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-validate.service
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For Relays disable cnode-cncli-sync.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-sync.service
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For Relays disable cnode-cncli-ptsendtip.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-ptsendtip.service
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For Relays disable cnode-logmonitor.service
                  ansible.builtin.systemd:
                    name: cnode-logmonitor.service
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For Relays enable cnode-tu-fetch.service
                  ansible.builtin.systemd:
                    name: cnode-tu-fetch.service
                    enabled: yes
                    masked: no
                - name: For Relays enable cnode-tu-push.service
                  ansible.builtin.systemd:
                    name: cnode-tu-push.service
                    masked: no
                - name: For Relays enable cnode-tu-push.timer
                  ansible.builtin.systemd:
                    name: cnode-tu-push.timer
                    enabled: yes
                    masked: no
                - name: For Relays enable cnode-tu-restart.service
                  ansible.builtin.systemd:
                    name: cnode-tu-restart.service
                    masked: no
                - name: For Relays enable cnode-tu-restart.timer
                  ansible.builtin.systemd:
                    name: cnode-tu-restart.timer
                    enabled: yes
                    masked: no
        - name: Synchronize the configuration for Block Producers
          when: cndeploy_node_type == "bp"
          block:
            # Simpler and quicker option but it requires rsync,
            # by default we'll use the builtin file and copy modules
            #- name: For BP Nodes copy priv directory without cold.skey using synchronize
            #  ansible.posix.synchronize:
            #    src: '{{ cndeploy_cnode_dir_local }}/priv/pool/{{ cndeploy_node_ticker }}'
            #    dest: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}'
            #    rsync_opts:
            #      - "--no-motd"
            #      - "--exclude=.git"
            - name: For BP Nodes copy priv directory without cold.skey using file/copy
              block:
                - name: For BP Nodes create directory for private keys
                  # TODO check if mode is changed for already existent parent directories
                  ansible.builtin.file:
                    path: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}'
                    state: directory
                    owner: '{{ ansible_user_id }}'
                    mode: 0700
                    recurse: yes
                - name: For BP Nodes create a list of private files (excluding cold.key)
                  delegate_to: localhost
                  ansible.builtin.find:
                    paths: '{{ cndeploy_cnode_dir_local }}/priv/pool/{{ cndeploy_node_ticker }}'
                    file_type: file
                    excludes: 'cold.key'
                    register: cndeploy_cnode_priv
                - name: For BP Nodes copy private files in list
                  ansible.builtin.copy:
                    src: '{{ item.path }}'
                    dest: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}/'
                    owner: '{{ ansible_user_id }}'
                    mode: 0600
                  loop: '{{ cndeploy_cnode_priv.files }}'
            - name: 'For BP Nodes define topology in {{ cndeploy_cnode_dir }}/files/topology.json'
              ansible.builtin.template:
                src: 'topology.json.j2'
                dest: '{{ cndeploy_cnode_dir }}/files/topology.json'
                mode: 0664
            - name: 'For BP Nodes unset CUSTOM_PEERS in {{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
              ansible.builtin.lineinfile:
                path: '{{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
                regexp: '^CUSTOM_PEERS='
                state: absent
            - name: For BP Nodes ensure proper service status (enabled/disabled)
              # TODO check if all required setup is in place for every service
              block:
                - name: For BP Nodes disable cnode-tu-fetch.service
                  ansible.builtin.systemd:
                    name: cnode-tu-fetch.service
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For BP Nodes disable cnode-tu-push.service
                  ansible.builtin.systemd:
                    name: cnode-tu-push.service
                    state: stopped
                    masked: yes
                - name: For BP Nodes disable cnode-tu-push.timer
                  ansible.builtin.systemd:
                    name: cnode-tu-push.timer
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For BP Nodes disable cnode-tu-restart.service
                  ansible.builtin.systemd:
                    name: cnode-tu-restart.service
                    state: stopped
                    masked: yes
                - name: For BP Nodes disable cnode-tu-restart.timer
                  ansible.builtin.systemd:
                    name: cnode-tu-restart.timer
                    state: stopped
                    enabled: no
                    masked: yes
                - name: For BP Nodes enable cnode-cncli-leaderlog.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-leaderlog.service
                    enabled: yes
                    masked: no
                - name: For BP Nodes enable cnode-cncli-ptsendslots.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-ptsendslots.service
                    enabled: yes
                    masked: no
                - name: For BP Nodes enable cnode-cncli-validate.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-validate.service
                    enabled: yes
                    masked: no
                - name: For BP Nodes enable cnode-cncli-sync.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-sync.service
                    enabled: yes
                    masked: no
                - name: For BP Nodes enable cnode-cncli-ptsendtip.service
                  ansible.builtin.systemd:
                    name: cnode-cncli-ptsendtip.service
                    enabled: yes
                    masked: no
                - name: For BP Nodes enable cnode-logmonitor.service
                  ansible.builtin.systemd:
                    name: cnode-logmonitor.service
                    enabled: yes
                    masked: no
        - name: Enable and start cnode.service
          ansible.builtin.systemd:
            name: cnode.service
            state: started
            enabled: yes
            masked: no
- name: Check that user bash aliases are in place
  when: cndeploy_add_aliases
  ansible.builtin.blockinfile:
    path: '~/.bash_aliases'
    block: '{{ cndeploy_aliases }}'
