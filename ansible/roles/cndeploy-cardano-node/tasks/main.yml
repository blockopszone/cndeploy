# Ansible role containing tasks to configure and update Cardano stake pool nodes
# using Guild operator's cnode.

---

- name: 'Check variables: cndeploy_cnode_dir_local'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> Local cnode directory must be also defined
      in CNODE_HOME environment variable.
    quiet: true
    that:
      - cndeploy_cnode_dir_local == lookup('env', 'CNODE_HOME')
        or cndeploy_cnode_dir_local_check_override
  delegate_to: localhost

- name: 'Check variables: cndeploy_node_type'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> Valid type values are "relay" and "bp".
    quiet: true
    that:
      - (cndeploy_node_type|lower == 'relay' or cndeploy_node_type|lower == 'bp')

- name: 'Check variables: cndeploy_node_ticker'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> String must contain between 3 and 5 characters,
      allowed characters are A to Z and 0 to 9.
    quiet: true
    that:
      - cndeploy_node_ticker is match('^[A-Z0-9]{3,5}$')

- name: 'Check variables: cndeploy_node_port'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> port must be an integer between 1 and 65535.
    quiet: true
    that:
      - cndeploy_node_port is integer
      - cndeploy_node_port >= 1
      - cndeploy_node_port <= 65535

- name: 'Check variables: cndeploy_node_cores'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> value must be an integer between 1 and 64.
    quiet: true
    that:
      - cndeploy_node_cores is integer
      - cndeploy_node_cores >= 1
      - cndeploy_node_cores <= 64

- name: 'Check variables: cndeploy_relay_nodes'
  ansible.builtin.assert:
    fail_msg: >
      Invalid value -> addr must be an IPv4 address or a resolvable host,
      and port must be an integer between 1 and 65535
    quiet: true
    that:
      - (item.addr|ipv4 or lookup('dig', item.addr) != 'NXDOMAIN')
      - item.port is integer
      - item.port >= 1
      - item.port <= 65535
  loop: '{{ cndeploy_relay_nodes }}'

- name: 'Resolve platform specific vars'
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      paths:
        - '{{ role_path }}/vars'
      skip: true

- name: 'Install dependencies for the OS'
  ansible.builtin.package:
    name: '{{ cndeploy_pkgs_dep|default([]) }}'
    state: 'present'
  become: true
  become_user: 'root'

- name: 'Check local Cardano versions'
  check_mode: false
  delegate_to: localhost
  ignore_errors: true
  block:
    - name: 'Check local Cardano node version'
      ansible.builtin.command:
        cmd: 'cardano-node version'
      changed_when: false
      failed_when: false
      register: cndeploy_node_version_local
    - name: 'Check local Cardano client version'
      ansible.builtin.command:
        cmd: 'cardano-cli version'
      changed_when: false
      failed_when: false
      register: cndeploy_cli_version_local
    - name: 'Show local Cardano node version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_node_version_local.stdout }}'
      changed_when: false
      failed_when: false
    - name: 'Show local Cardano client version'
      ansible.builtin.debug:
        msg: '{{ cndeploy_cli_version_local.stdout }}'
      changed_when: false
      failed_when: false

- name: 'If Cardano node is locally installed'
  when:
    - cndeploy_node_version_local.rc == 0
    - cndeploy_cli_version_local.rc == 0
  block:
    - name: 'Check remote cardano versions'
      check_mode: false
      ignore_errors: true
      block:
        - name: 'Check remote Cardano node version'
          ansible.builtin.command:
            cmd: '~/.cabal/bin/cardano-node version'
          changed_when: false
          failed_when: false
          register: cndeploy_node_version
        - name: 'Check remote Cardano client version'
          ansible.builtin.command:
            cmd: '~/.cabal/bin/cardano-cli version'
          changed_when: false
          failed_when: false
          register: cndeploy_cli_version
        - name: 'Show remote Cardano node version'
          ansible.builtin.debug:
            msg: '{{ cndeploy_node_version.stdout }}'
          changed_when: false
          failed_when: false
        - name: 'Show remote Cardano client version'
          ansible.builtin.debug:
            msg: '{{ cndeploy_cli_version.stdout }}'
          changed_when: false
          failed_when: false
    - name: 'If local and remote versions are not equal proceed to install'
      when: ((cndeploy_node_version_local.stdout != cndeploy_node_version.stdout) or
             (cndeploy_cli_version_local.stdout != cndeploy_cli_version.stdout))
      block:
        - name: 'Stop the local service'
          ansible.builtin.service:
            name: 'cnode.service'
            state: 'stopped'
          become: true
          become_user: 'root'
          delegate_to: localhost
          notify: 'Start Cardano node Local'
        - name: 'Wait 30 seconds to make sure the local service is stopped'
          ansible.builtin.pause:
            seconds: 30
        - name: 'Stop the remote service if needed'
          ansible.builtin.service:
            name: 'cnode.service'
            state: 'stopped'
          become: true
          become_user: 'root'
          notify: 'Start Cardano node'
          when: cndeploy_node_version.rc == 0
        - name: 'Wait 30 seconds to make sure the remote service is stopped'
          ansible.builtin.pause:
            seconds: 30
          when: cndeploy_node_version.rc == 0
        - name: 'Deploy Cardano node by transferring the compiled binaries to the host'
          ansible.posix.synchronize:
            archive: true
            delete: true
            dest: '~/'
            mode: 'push'
            src: '~/.cabal'
          # synchronize works better for big transfers
          #ansible.builtin.copy:
          #  src: '~/.cabal'
          #  dest: '~'
          #async: 86400
          #poll: 60
        - name: 'Check again for remote cardano versions'
          check_mode: false
          ignore_errors: true
          block:
            # TODO: Be sure bin is in path
            - name: 'Check new remote Cardano node version'
              ansible.builtin.command:
                cmd: '~/.cabal/bin/cardano-node version'
              changed_when: false
              failed_when: false
              register: cndeploy_node_version_new
            - name: 'Check new remote Cardano client version'
              ansible.builtin.command:
                cmd: '~/.cabal/bin/cardano-cli version'
              changed_when: false
              failed_when: false
              register: cndeploy_cli_version_new
            - name: 'Show new remote Cardano node version'
              ansible.builtin.debug:
                msg: '{{ cndeploy_node_version_new.stdout }}'
              changed_when: false
              failed_when: false
            - name: 'Show new remote Cardano client version'
              ansible.builtin.debug:
                msg: '{{ cndeploy_cli_version_new.stdout }}'
              changed_when: false
              failed_when: false
        - name: 'End execution for host if install was not successful'
          meta: end_host
          when: ((cndeploy_node_version_local.stdout != cndeploy_node_version_new.stdout) or
                 (cndeploy_cli_version_local.stdout != cndeploy_cli_version_new.stdout))
        - name: 'Copy systemd unit files for all operation modes using templates'
          become: true
          become_user: 'root'
          block:
            - name: 'Deploy from template the systemd unit file cnode-cncli-leaderlog.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-cncli-leaderlog.service'
                mode: '0644'
                src: 'cnode-cncli-leaderlog.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-cncli-ptsendslots.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-cncli-ptsendslots.service'
                mode: '0644'
                src: 'cnode-cncli-ptsendslots.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-cncli-ptsendtip.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-cncli-ptsendtip.service'
                mode: '0644'
                src: 'cnode-cncli-ptsendtip.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-cncli-sync.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-cncli-sync.service'
                mode: '0644'
                src: 'cnode-cncli-sync.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-cncli-validate.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-cncli-validate.service'
                mode: '0644'
                src: 'cnode-cncli-validate.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-logmonitor.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-logmonitor.service'
                mode: '0644'
                src: 'cnode-logmonitor.service.j2'
            - name: 'Deploy from template the systemd unit file cnode.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode.service'
                mode: '0644'
                src: 'cnode.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-tu-fetch.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-tu-fetch.service'
                mode: '0644'
                src: 'cnode-tu-fetch.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-tu-push.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-tu-push.service'
                mode: '0644'
                src: 'cnode-tu-push.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-tu-push.timer'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-tu-push.timer'
                mode: '0644'
                src: 'cnode-tu-push.timer.j2'
            - name: 'Deploy from template the systemd unit file cnode-tu-restart.service'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-tu-restart.service'
                mode: '0644'
                src: 'cnode-tu-restart.service.j2'
            - name: 'Deploy from template the systemd unit file cnode-tu-restart.timer'
              ansible.builtin.template:
                dest: '/etc/systemd/system/cnode-tu-restart.timer'
                mode: '0644'
                src: 'cnode-tu-restart.timer.j2'
        - name: 'Copy db if not already present'
          block:
            - name: 'Check if db directory is empty'
              ansible.builtin.find:
                file_type: 'any'
                paths: '{{ cndeploy_cnode_dir }}/db/'
                patterns: '*.*'
              register: cndeploy_db_dir_files
            - name: 'If db directory is empty copy the database to save some time'
              ansible.posix.synchronize:
                archive: true
                delete: true
                dest: '{{ cndeploy_cnode_dir }}/'
                mode: 'push'
                src: '{{ cndeploy_cnode_dir_local }}/db'
              # synchronize works better for big transfers
              #ansible.builtin.copy:
              #  src: '{{ cndeploy_cnode_dir_local }}/db'
              #  dest: '{{ cndeploy_cnode_dir }}/'
              #async: 86400
              #poll: 60
              when: cndeploy_db_dir_files.matched|int == 0
        - name: 'Synchronize the common configuration for nodes'
          block:
            - name: 'Set POOL_NAME in {{ cndeploy_cnode_dir }}/scripts/env'
              ansible.builtin.lineinfile:
                insertafter: '^#POOL_NAME='
                line: 'POOL_NAME="{{ cndeploy_node_ticker|default() }}"'
                path: '{{ cndeploy_cnode_dir }}/scripts/env'
                regexp: '^POOL_NAME='
                state: 'present'
            - name: 'Set CNODE_PORT in {{ cndeploy_cnode_dir }}/scripts/env'
              ansible.builtin.lineinfile:
                insertafter: '^#CNODE_PORT='
                line: 'CNODE_PORT="{{ cndeploy_node_port|default(3000) }}"'
                path: '{{ cndeploy_cnode_dir }}/scripts/env'
                regexp: '^CNODE_PORT='
                state: 'present'
            - name: 'Set CPU_CORES in {{ cndeploy_cnode_dir }}/scripts/cnode.sh'
              ansible.builtin.lineinfile:
                insertafter: '^#CPU_CORES='
                line: 'CPU_CORES={{ cndeploy_node_cores|default(2) }}'
                path: '{{ cndeploy_cnode_dir }}/scripts/cnode.sh'
                regexp: '^CPU_CORES='
                state: 'present'
        - name: 'Synchronize the configuration for Relays'
          when: cndeploy_node_type == 'relay'
          block:
            - name: 'For Relays make sure priv directory is empty'
              ansible.builtin.shell:
                cmd: 'srm -rfz {{ cndeploy_cnode_dir|quote }}/priv/*'
              args:
                removes: '{{ cndeploy_cnode_dir }}/priv/*'
            - name: 'For Relays set CUSTOM_PEERS in {{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
              ansible.builtin.lineinfile:
                insertafter: '^#CUSTOM_PEERS='
                line: 'CUSTOM_PEERS="{{ cndeploy_node_custom_peers|default() }}"'
                path: '{{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
                regexp: '^CUSTOM_PEERS='
                state: 'present'
            - name: 'For Relays ensure proper service status (enabled/disabled)'
              # TODO check if all the required setup is in place for every service
              block:
                - name: 'For Relays disable cnode-cncli-leaderlog.service'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-cncli-leaderlog.service'
                    state: 'stopped'
                - name: 'For Relays disable cnode-cncli-ptsendslots.service'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-cncli-ptsendslots.service'
                    state: 'stopped'
                - name: 'For Relays disable cnode-cncli-validate.service'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-cncli-validate.service'
                    state: 'stopped'
                - name: 'For Relays disable cnode-cncli-sync.service'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-cncli-sync.service'
                    state: 'stopped'
                - name: 'For Relays disable cnode-cncli-ptsendtip.service'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-cncli-ptsendtip.service'
                    state: 'stopped'
                - name: 'For Relays disable cnode-logmonitor.service'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-logmonitor.service'
                    state: 'stopped'
                - name: 'For Relays enable cnode-tu-fetch.service'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-tu-fetch.service'
                - name: 'For Relays enable cnode-tu-push.service'
                  ansible.builtin.systemd:
                    masked: false
                    name: 'cnode-tu-push.service'
                - name: 'For Relays enable cnode-tu-push.timer'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-tu-push.timer'
                - name: 'For Relays enable cnode-tu-restart.service'
                  ansible.builtin.systemd:
                    masked: false
                    name: 'cnode-tu-restart.service'
                - name: 'For Relays enable cnode-tu-restart.timer'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-tu-restart.timer'
        - name: 'Synchronize the configuration for Block Producers'
          when: cndeploy_node_type == 'bp'
          block:
            # Simpler and quicker option but it requires rsync,
            # by default we'll use the builtin file and copy modules
            #- name: For BP Nodes copy priv directory without cold.skey using synchronize
            #  ansible.posix.synchronize:
            #    src: '{{ cndeploy_cnode_dir_local }}/priv/pool/{{ cndeploy_node_ticker }}'
            #    dest: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}'
            #    rsync_opts:
            #      - "--no-motd"
            #      - "--exclude=.git"
            - name: 'For BP Nodes copy priv directory without cold.skey using file/copy'
              block:
                - name: 'For BP Nodes create directory for private keys'
                  # TODO check if mode is changed for already existent parent directories
                  ansible.builtin.file:
                    mode: '0700'
                    owner: '{{ ansible_user_id }}'
                    path: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}'
                    recurse: true
                    state: 'directory'
                - name: 'For BP Nodes create a list of private files (excluding cold.key)'
                  ansible.builtin.find:
                    excludes: 'cold.key'
                    file_type: 'file'
                    paths: '{{ cndeploy_cnode_dir_local }}/priv/pool/{{ cndeploy_node_ticker }}'
                    register: cndeploy_cnode_priv
                  delegate_to: localhost
                - name: 'For BP Nodes copy private files in list'
                  ansible.builtin.copy:
                    dest: '{{ cndeploy_cnode_dir }}/priv/pool/{{ cndeploy_node_ticker }}/'
                    mode: '0600'
                    owner: '{{ ansible_user_id }}'
                    src: '{{ item.path }}'
                  loop: '{{ cndeploy_cnode_priv.files }}'
            - name: 'For BP Nodes define topology in {{ cndeploy_cnode_dir }}/files/topology.json'
              ansible.builtin.template:
                dest: '{{ cndeploy_cnode_dir }}/files/topology.json'
                mode: '0664'
                src: 'topology.json.j2'
            - name: 'For BP Nodes unset CUSTOM_PEERS in {{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
              ansible.builtin.lineinfile:
                path: '{{ cndeploy_cnode_dir }}/scripts/topologyUpdater.sh'
                regexp: '^CUSTOM_PEERS='
                state: 'absent'
            - name: 'For BP Nodes ensure proper service status (enabled/disabled)'
              # TODO check if all the required setup is in place for every service
              block:
                - name: 'For BP Nodes disable cnode-tu-fetch.service'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-tu-fetch.service'
                    state: 'stopped'
                - name: 'For BP Nodes disable cnode-tu-push.service'
                  ansible.builtin.systemd:
                    masked: true
                    name: 'cnode-tu-push.service'
                    state: 'stopped'
                - name: 'For BP Nodes disable cnode-tu-push.timer'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-tu-push.timer'
                    state: 'stopped'
                - name: 'For BP Nodes disable cnode-tu-restart.service'
                  ansible.builtin.systemd:
                    masked: true
                    name: 'cnode-tu-restart.service'
                    state: 'stopped'
                - name: 'For BP Nodes disable cnode-tu-restart.timer'
                  ansible.builtin.systemd:
                    enabled: false
                    masked: true
                    name: 'cnode-tu-restart.timer'
                    state: 'stopped'
                - name: 'For BP Nodes enable cnode-cncli-leaderlog.service'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-cncli-leaderlog.service'
                - name: 'For BP Nodes enable cnode-cncli-ptsendslots.service'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-cncli-ptsendslots.service'
                - name: 'For BP Nodes enable cnode-cncli-validate.service'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-cncli-validate.service'
                - name: 'For BP Nodes enable cnode-cncli-sync.service'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-cncli-sync.service'
                - name: 'For BP Nodes enable cnode-cncli-ptsendtip.service'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-cncli-ptsendtip.service'
                - name: 'For BP Nodes enable cnode-logmonitor.service'
                  ansible.builtin.systemd:
                    enabled: true
                    masked: false
                    name: 'cnode-logmonitor.service'
        - name: 'Enable and start cnode.service'
          ansible.builtin.systemd:
            enabled: true
            masked: false
            name: 'cnode.service'
            state: 'started'

- name: 'Check that user bash aliases are in place'
  ansible.builtin.blockinfile:
    block: '{{ cndeploy_aliases }}'
    path: '~/.bash_aliases'
  when: cndeploy_add_aliases|default(false)|bool
