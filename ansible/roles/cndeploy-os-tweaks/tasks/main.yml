---
- name: resolve platform specific vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/vars'

- name: Set hostname
  when:
    - cndeploy_change_hostname
    - cndeploy_hostname is defined
  become: yes
  become_user: root
  ansible.builtin.hostname:
    name: '{{ cndeploy_hostname }}'

- name: Add entries to hosts file
  when:
    - cndeploy_change_hosts
    - cndeploy_hosts is defined
  become: yes
  become_user: root
  ansible.builtin.blockinfile:
    path: /etc/hosts
    block: '{{ cndeploy_hosts }}'

- name: Secure SSH access if not connected as root
  when:
    - cndeploy_restrict_ssh
    - ansible_user_id != "root"
  become: yes
  become_user: root
  ansible.builtin.copy:
    dest: '/etc/ssh/sshd_config.d/05-ssh-secured.conf'
    owner: root
    group: root
    mode: 0644
    content: |
      PermitRootLogin prohibit-password
      PubkeyAuthentication yes
      PasswordAuthentication no
      PermitEmptyPasswords no
      ChallengeResponseAuthentication no
      UsePAM yes
      X11Forwarding yes
  notify: Restart SSH service

- name: Update cache for Debian based systems
  become: yes
  become_user: root
  ansible.builtin.apt:
    update_cache: yes
  when: ansible_facts['os_family'] == "Debian"

- name: Upgrade all packages for Debian based Systems
  become: yes
  become_user: root
  ansible.builtin.apt:
    name: "*"
    state: latest
  when: (ansible_facts['os_family'] == "Debian" and upgrade_packages)

- name: Update cache for RedHat based systems
  become: yes
  become_user: root
  ansible.builtin.yum:
    update_cache: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: Upgrade all packages for RedHat based Systems
  become: yes
  become_user: root
  ansible.builtin.yum:
    name: "*"
    state: latest
  when: (ansible_facts['os_family'] == "RedHat" and upgrade_packages)

# TODO: Upgrade packages for other distributions

- name: Install dependencies for the os
  become: yes
  become_user: root
  package:
    name: '{{ dep_pkgs|default([]) }}'
    state: present

- name: Install additional packages
  when: cndeploy_install_additional
  become: yes
  become_user: root
  package:
    name: '{{ cndeploy_additional_pkgs|default([]) }}'
    state: present

- name: Setup firewall
  when: cndeploy_firewall_enabled
  block:
    - name: Use ufw if available
      # TODO finish block
    - name: Use firewald if available when ufw is not
      # TODO finish block
    - name: Use iptables if available when ufw and firewalld are not
      # TODO finish block

- name: Setup allow-hostname (ubuntu only atm)
  when:
    - cndeploy_allowhostname_enabled
    - cndeploy_allowhostname is defined
    - ansible_facts['os_distribution'] == "Ubuntu"
  block:
    - name: Download allow-hostname script
      become: yes
      become_user: root
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/jmhoms/allow-hostname/master/allow-hostname.bash
        dest: /usr/local/bin/
        mode: '0700'
    - name: Configure defined hostname in the script
      become: yes
      become_user: root
      lineinfile:
        dest: /usr/local/bin/allow-hostname.bash
        state: present
        regexp: '^HOSTNAME='
        line: 'HOSTNAME={{ cndeploy_allowhostname }}'
    - name: Configure ufw mode in the script
      become: yes
      become_user: root
      lineinfile:
        dest: /usr/local/bin/allow-hostname.bash
        state: present
        regexp: '^UFWMODE='
        line: 'UFWMODE=yes'
    - name: Configure cron to run the script every 5 minutes
      ansible.builtin.copy:
        dest: '/etc/cron.d/allow-hostname'
        owner: root
        group: root
        mode: 0644
        content: |
          */5 * * * * root /usr/local/bin/allow-hostname.bash

- name: Setup an additional Swap file
  when: cndeploy_additional_swap
  block:
    # TODO finish block
